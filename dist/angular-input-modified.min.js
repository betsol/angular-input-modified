!function(window,angular){"use strict";function ModifiableDirective(){return{restrict:"A",controller:function(){}}}function ConfigProvider(){var e={enabledGlobally:!0,modifiedClassName:"ng-modified",notModifiedClassName:"ng-not-modified"};return{enableGlobally:function(){return e.enabledGlobally=!0,this},disableGlobally:function(){return e.enabledGlobally=!1,this},setModifiedClassName:function(i){return e.modifiedClassName=String(i),this},setNotModifiedClassName:function(i){return e.notModifiedClassName=String(i),this},$get:function(){return e}}}function ModifiableBehaviorDirective($animate,config){return{restrict:"E",require:["?ngModel","?^form","?^bsModifiable"],link:function($scope,$element,attrs,controllers){var modelPath=attrs.ngModel,ngModel=controllers[0],ngForm=controllers[1],bsModifiable=controllers[2];if(ngModel&&(config.enabledGlobally||bsModifiable)){var toggleCssClasses=function(){$animate.addClass($element,ngModel.modified?config.modifiedClassName:config.notModifiedClassName),$animate.removeClass($element,ngModel.modified?config.notModifiedClassName:config.modifiedClassName)},onElementModified=function(e){updateModifiedModelState(e)},updateModifiedModelState=function(e){if(ngForm){var i=ngForm.modifiedModels.indexOf(ngModel),o=-1!==i;e&&!o?(ngForm.modifiedModels.push(ngModel),ngForm.modifiedCount++):!e&&o&&(ngForm.modifiedModels.splice(i,1),ngForm.modifiedCount--),ngForm.modified=ngForm.modifiedCount>0}},masterValueIsSet=!1,onInputValueChanged=function(){if(masterValueIsSet){var e=!valuesEqual(ngModel.$modelValue,ngModel.masterValue);ngModel.modified!==e&&(onElementModified(e),ngModel.modified=e,toggleCssClasses())}else ngModel.masterValue=ngModel.$modelValue,toggleCssClasses(),masterValueIsSet=!0},originalSetPristine=ngModel.$setPristine;ngModel.modified=!1,ngModel.masterValue=void 0,ngModel.$setPristine=function(){originalSetPristine.apply(this,arguments),ngModel.masterValue=ngModel.$modelValue,ngModel.modified=!1,onElementModified(!1),toggleCssClasses()},ngModel.reset=function(){try{eval("$scope."+modelPath+" = ngModel.masterValue;")}catch(exception){}},ngForm&&!isFormInitialized(ngForm)&&initializeForm(ngForm),$scope.$watch(modelPath,onInputValueChanged)}}}}function isModelController(e){return"object"==typeof e&&"$modelValue"in e}function isModelControllerInitialized(e){return"modified"in e}function iterateFormElements(e,i){angular.forEach(e,function(e){isModelController(e)&&i(e)})}function initializeForm(e){e.modified=!1,e.modifiedCount=0,e.modifiedModels=[],e.reset=function(){iterateFormElements(e,function(e){isModelControllerInitialized(e)&&e.reset()})}}function isFormInitialized(e){return"undefined"!=typeof e.modified}function valuesEqual(e,i){return e=unifyValue(e),i=unifyValue(i),"object"==typeof e&&"object"==typeof i?e instanceof Date&&i instanceof Date?e.getTime()===i.getTime():angular.equals(e,i):e==i}function unifyValue(e){return void 0===e?null:""===e?null:e}var directiveSpecification=["$animate","inputModifiedConfig",ModifiableBehaviorDirective];angular.module("ngInputModified",["ng"]).directive("bsModifiable",ModifiableDirective).directive("input",directiveSpecification).directive("textarea",directiveSpecification).directive("select",directiveSpecification).directive("div",directiveSpecification).provider("inputModifiedConfig",ConfigProvider)}(window,angular);